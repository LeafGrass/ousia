Code Style and Naming Rules
===========================


Brief introduction
------------------
- This document is strongly based on the codestyle of FreeBSD, Linux, and
traditional Unix. So, great appreciates to them first!

- This file specifies the preferred style for source code files in Ousia source
tree. It is also a guide for the preferred userland code style. Many of the
style rules are implicit in the examples. Be careful to check the examples
before assuming that style is silent on an issue.


Comments
--------
/*
 * VERY important single-line comments look like this.
 */

/* Most single-line comments look like this. */

/*
 * Multi-line comments look like this.  Make them real sentences. Fill them so
 * they look like real paragraphs.
 */

- The copyright header should be a multi-line comment, with the first line of
the comment having a dash after the star like so:

/*
 * Copyright (c) 1984-2025 John Q. Public
 * All rights reserved.
 *
 * Long, boring license goes here, but trimmed for brevity
 */

- Never use C++ stype line comments, if encounter with problems such as nested
  comments, use ``#if FALSE'' and ``#endif'' instead.


Headers
-------
- Leave another blank line before the header files.
- Ousia include files come first (i.e. ousia/*.h), then system include files
(i.e. sys/*.h) follow.
	#include <sys/ictl.h>
	#include <sys/time.h>  /* Non-local includes in angle brackets. */


Macros
------
- The names of ``unsafe'' macros (ones that have side effects), and the names of
  macros for manifest constants, are all in uppercase. The expansions of
  expression-like macros are either a single token or have outer parentheses.

- Put a single space character between the #define and the macro name.

- If a macro is an inline expansion of a function, the function name is all in
  lowercase and the macro has the same name all in uppercase.

- Right-justify the backslashes; it makes it easier to read.

- If the macro encapsulates a compound statement, enclose it in a do loop,
  so that it can safely be used in if statements.

- Any final statement-terminating semicolon should be supplied by the macro
  invocation rather than the macro, to make parsing easier for pretty-printers
  and editors.

	#define MACRO(x, y) do {	\
		variable = (x) + (y);	\
		(y) += 2;		\
	} while (0)

- When code is conditionally compiled using #ifdef or #if, a comment may be
  added following the matching #endif or #else to permit the reader to easily
  discern where conditionally compiled code regions end. This comment should be
  used only for (subjectively) long regions, regions greater than 20 lines, or
  where a series of nested #ifdef 's may be confusing to the reader. Exceptions
  may be made for cases where code is conditionally not compiled for the 
  purposes of lint(1), even though the uncompiled region may be small. The
  comment should be separated from the #endif or #else by a single space. For
  short conditionally compiled regions, a closing comment should not be used.

	#if 0
	#ifndef lint
	static char sccsid[] = "by LeafGrass - leafgrass.g@gmail.com";
	#endif /* not lint */
	#endif

- The comment for #endif should match the expression used in the corresponding
  #if or #ifdef. The comment for #else and #elif should match the inverse of the
  expression(s) used in the preceding #if and/or #elif statements.

	#ifdef OUSIA_USE_ULIB
	#include <ulib/stdarg.h>
	#include <ulib/stddef.h>
	#else
	#include <stdarg.h>
	#include <stddef.h>
	#endif

	#ifdef COMPAT_43
	/* A large region here, or other conditional code. */
	#else /* !COMPAT_43 */
	/* Or here. */
	#endif /* COMPAT_43 */

	#ifndef COMPAT_43
	/* Yet another large region here, or other conditional code. */
	#else /* COMPAT_43 */
	/* Or here. */
	#endif /* !COMPAT_43 */


Enumerations
------------
- Enumeration values are all uppercase.

- Each first item in enum should be initialized to avoid portability issues.

	enum enumtype {
		ONE = 1,
		TWO
	} et;


Declarations
------------
- In declarations, do not put any whitespace between asterisks and adjacent
  tokens, except for tokens that are identifiers related to types. (These
  identifiers are the names of basic types, type qualifiers, and typedef-names
  other than the one being declared.) Separate these identifiers from asterisks
  using a single space.

	int *pointer;
	unsigned int counter;

- When declaring variables in structures, declare them sorted by use, then by
  size (largest to smallest), and then in alphabetical order.

- Each item in structures gets its own line. Try to make the structure readable
  by aligning the member names using either one or two tabs depending upon your
  judgment.

- You should use one tab only if it suffices to align at least 90% of the member
  names. Names following extremely long types should be separated by a single
  space.

	struct foo {
		struct foo *next;		/* List of active foo. */
		struct mumble amumble;		/* Comment for mumble. */
		int bar;			/* Try to align the comments. */
		struct verylongtypename *baz;	/* Won't fit in 2 tabs. */
	};
	struct foo *foohead;			/* Head of global foo list. */


Structures
----------
- Major structures should be declared at the top of the file in which they are
  used, or in separate header files if they are used in multiple source files.

- Use of the structures should be by separate declarations and should be extern
  if they are declared in a header file.

- Use queue macros rather than rolling your own lists, whenever possible. Thus,
  the previous example would be better written:

	#include <sys/queue.h>

	struct foo {
		LIST_ENTRY(foo)	link;		/* Use queue macros for foo lists. */
		struct mumble amumble;		/* Comment for mumble. */
		int bar;			/* Try to align the comments. */
		struct verylongtypename *baz;	/* Won't fit in 2 tabs. */
	};
	LIST_HEAD(, foo) foohead;		/* Head of global foo list. */


Typedefs
--------
- Avoid using typedefs for structure types. Typedefs are problematic because
  they do not properly hide their underlying type; for example you need to know
  if the typedef is the structure itself or a pointer to the structure. In
  addition they must be declared exactly once, whereas an incomplete structure
  type can be mentioned as many times as necessary.

- Typedefs are difficult to use in stand-alone header files: the header that
  defines the typedef must be included before the header that uses it, or by the
  header that uses it (which causes namespace pollution), or there must be a
  back-door mechanism for obtaining the typedef.

- When convention requires a typedef, make its name match the struct tag. Avoid
  typedefs ending in ``_t'', except as specified in Standard C or by POSIX.

	/* Make the structure name match the typedef. */
	typedef struct bar {
		int level;
	} BAR;
	typedef int			foo;	/* This is foo. */
	typedef const long	baz;	/* This is baz. */


Functions
---------
- All functions are prototyped somewhere.

- Function prototypes for private functions (i.e., functions not used else-
  where) go at the top of the first source module.  Functions local to one
  source module should be declared static.

- Functions used from other parts of the kernel are prototyped in the relevant
  include file. Function prototypes should be listed in a logical order,
  preferably alphabetical unless there is a compelling reason to use a different
  ordering.

- Functions that are used locally in more than one module go into a separate
  header file, e.g. "extern.h".

- Do not use the __P macros, because those are header files' priviledge.

- In general code can be considered ``new code'' when it makes up about 50% or
  more of the file(s) involved.  This is enough to break precedents in the
  existing code and use the current style guidelines.
- The core has a name associated with parameter types, e.g., in the core use:

	void function(int fd);

- In the kernel, in header files invisible to userland applications, prototypes
  that are invisible must use ``protected'' names (ones beginning with one or
  two underscores) with the types. E.g., use:

	/* in kernel, for functions that are visible to other parts */
	void _function(int _fd); 

	/* in kernel, for functions that are only visible of its own, static */
	static void __function(int _fd);

/*
 * All major routines should have a comment briefly describing what they do. The
 * comment before the "main" routine should describe what the program does.
 * Try to avoid trivial comments except this one in the function body.
 */
	int main(int argc, char *argv[])
	{
		char *ep;
		long num;
		int ch;

		/* do things */

		return 0;
	}


Statements
----------
- Elements in a switch statement that cascade should have a FALLTHROUGH comment.
  Numerical arguments should be checked for accuracy. Code that cannot be
  reached should have a NOTREACHED comment.

	while ((ch = getopt(argc, argv, "abNn:")) != -1)
		switch (ch) {			/* Indent the switch. */
		case 'a':			/* Don't indent the case. */
			aflag = 1;		/* Indent case body one tab. */
			/* FALLTHROUGH */
		case 'b':
			bflag = 1;
			break;
		case 'N':
			Nflag = 1;
			break;
		case 'n':
			num = strtol(optarg, &ep, 10);
			if (num <= 0 || *ep != '\0') {
				warnx("illegal number, -n argument -- %s",
				optarg);
				usage();
			}
			break;
		case '?':
		default:
			usage();
			/* NOTREACHED */
		}

- Space after keywords (if, while, for, return, switch). No braces (`{'
  and `}') are used for control statements with zero or only a single
  statement unless that statement is more than a single line in which case
  they are permitted. Forever loops are done with for's, not while's.

	for (p = buf; *p != '\0'; ++p)
		; /* nothing */
	for (;;)
		STATEMENT;
	for (;;) {
		z = a + really + long + statement + that + needs +
			two + lines + gets + indented + four + spaces +
			on + the + second + and + subsequent + lines;
	}
	for (;;) {
		if (cond)
		STATEMENT;
	}
	if (val != NULL)
	val = realloc(val, newsize);

- Parts of a for loop may be left empty. Do not put declarations inside blocks
  unless the routine is unusually complicated.

	for (; cnt < 15; cnt++) {
		STATEMENT1;
		STATEMENT2;
	}

- Indentation is an 8 character tab. Second level indents are four spaces.
  If you have to wrap a long statement, put the operator at the end of the line.
  And the second line, statement may not need to force align with above, one
  more indent is recommended.

	while (cnt < 20 && this_variable_name_is_too_long &&
			ep != NULL)
		z = a + really + long + statement + that + needs +
			two + lines + gets + indented + four + spaces +
			on + the + second + and + subsequent + lines;

- Do not add whitespace at the end of a line, and only use tabs followed by
  spaces to form the indentation. Do not use more spaces than a tab will produce
  and do not use spaces in front of tabs.

- Closing and opening braces go on the same line as the else. Braces that are
  not necessary may be left out.

	if (test)
		STATEMENT;
	else if (bar) {
		STATEMENT;
		STATEMENT;
	} else
	STATEMENT;

- No spaces after function names when it is called. Commas have a space after
them. No spaces after `(' or `[' or preceding `]' or `)' characters.

	error = function(a1, a2);
	if (error != 0)
		exit(error);

- Unary operators do not require spaces, binary operators do. Do not use
  parentheses unless they are required for precedence or unless the statement is
  confusing without them. Remember that other people may confuse easier than
  you. Do YOU understand the following?

	a = b->c[0] + ~d == (e || f) || g && h ? i : j >> 1;
	k = !(l & FLAGS);

- The opening brace of the function body should be on a line by itself.

	static char *function(int a1, int a2, float fl, int a4)
	{
		STATEMENT;
	}


Variables
---------
- When declaring variables in functions declare them sorted by size, then in
  alphabetical order; multiple ones per line are okay.
  If a line overflows reuse the type keyword.

- Be careful to not obfuscate the code by initializing variables in the
  declarations. Use this feature only thoughtfully. DO NOT use function calls in
  initializers.

	struct foo one, *two;
	double three;
	int *four, five;
	char *six, seven, eight, nine, ten, eleven, twelve;

	four = myfunction();


Miscellenous
------------
- Do not declare functions inside other functions; ANSI C says that such
  declarations have file scope regardless of the nesting of the declaration.
  Hiding file declarations in what appears to be a local scope is undesirable
  and will elicit complaints from a good compiler.

- Casts and sizeof's are not followed by a space. Note that indent(1) does not
  understand this rule. sizeof's are written with parenthesis always.
  The redundant parenthesis rules do not apply to sizeof(var) instances.

- NULL is the preferred null pointer constant. Use NULL instead of (type *)0 or
  (type *)NULL in contexts where the compiler knows the type, e.g., in
  assignments. Use (type *)NULL in other contexts, in particular for all
  function args. (Casting is essential for variadic args and is necessary for
  other args if the function prototype might not be in scope.)

- Test pointers against NULL, e.g., use:

	(p = f()) == NULL

  NOT:
	!(p = f())

- Do not use ! for tests unless it is a boolean, e.g. use:

	if (*p == '\0')

  NOT:
	if (!*p)

- Routines returning void * should NOT have their return values cast to any
  pointer type.

- Values in return statements enclosed in parentheses in strongly recommended.

  Use err(3) or warn(3), do not roll your own.

	if ((four = malloc(sizeof(struct foo))) == NULL)
		err(1, (char *)NULL);
	if ((six = (int *)overflow()) == NULL)
		errx(1, "number overflowed");
	return (eight);

- Variable numbers of arguments should look like this:

	#include <stdarg.h>

	void vaf(const char *fmt, ...)
	{
		va_list ap;

		va_start(ap, fmt);
		STUFF;
		va_end(ap);
		/* No return needed for void functions. */
	}

- Whenever possible, code should be run through a code checker (e.g., gcc -Wall)
  and try to produce no warnings.


Style in Ousia
--------------
  NOTE those underlines!
- Variable names
	int baz;		/* global variable, try to avoid */
	int _bazz;		/* can be accessed in ousia core code */
	static int __bazz;	/* can only be accessed in local single file */
- Function names
	int os_foo(void);	/* interfaces, that is, syscall, external for app */
	int _os_foo(void);	/* internal interfaces, can be called in ousia core */
	static int __foo(void); /* basic functions, can only be called in local */
